# -*- cperl -*-

##### General layout of the module #####
#
# Each type of transform that is supported by this module has a plain,
# unthreaded perl entry point the user calls. This entry point makes sure the
# FFTW plan exists (or makes it). Then it calls the THREADED PP function to
# actually compute the transform

# I generate code for up to 10-dimensional FFTs
my $maxrank = 10;

pp_addhdr( '
#include <fftw3.h>
' );


# available functions:
# fft{inplace,not}{inverse,forward}{real,complex}
#
# I want to be able to say $X = fft1($x); rank is required. fft() is ambiguous
# about whether threading is desired or ir a large fft is desired. Old PDL::FFTW
# did one thing, matlab does another, so I do not include this function at all




# I define up to rank-10 FFTs. This is annoyingly arbitrary, but hopefully
# should be sufficient
for my $rank (1..$maxrank)
{
  generateDefinitions($rank);
}
pp_export_nothing();

pp_addxs('', `cat compute_plan_template.xs`);
pp_addpm( {At => 'Top'}, scalar `cat FFTW3_header_include.pm` );


for my $rank (1..$maxrank)
{
  pp_addpm({At => 'Bot'}, <<EOF );
sub fft$rank { __fft_with_rank( $rank, "fft$rank",\@_ ); }
eval( "*PDL::fft$rank = \&fft$rank;" );

sub ifft$rank { __fft_with_rank( $rank, "ifft$rank", \@_ ); }
eval( "*PDL::ifft$rank = \&ifft$rank;" );
EOF

  pp_add_exported( "fft$rank", "ifft$rank" );
}

pp_done();


sub generateDefinitions
{
  my $rank = shift;

  my $funcname = "__fft$rank";

  # make dimension string 'n0=2,n1,n2,n3,n4...'. The leading 2 is for the
  # (real,imag) complex pair
  my @dims = map {"n$_"} 1..$rank;
  unshift @dims, 'n0=2';
  my $dims_string = join(',', @dims);

# TODO worry about alignment and inplace

  my $code =  `cat template_complex.c`;
  $code    =~ s/RANK/$rank/g;

  my %pp_def = ( HandleBad    => 0,
                 Pars         => "in($dims_string); [o]out($dims_string);",
                 GenericTypes => [F,D],
                 Code         => $code,
                 OtherPars    => 'IV plan', # comes not from the user, but
                                            # from the pre-fft code

                 # this is a private function so I don't want to create
                 # user-visible documentation or exports
                 Doc          => undef,
                 PMFunc       => ''
               );
  pp_def( $funcname, %pp_def );
}
